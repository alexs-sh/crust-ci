# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *
# ----------------------------------------------------------------------
# Параметры Buildbot
# ----------------------------------------------------------------------
# Параметры для конфигурации
# Имя воркера отвечающего за сборку linux armhf
WORKER_NAME_LINUX_ARMHF = 'armhf-linux'

# Имя воркера отвечающего за сборку КФС armhf
WORKER_NAME_ROOTFS_ARMHF = 'armhf-rootfs'

# Дефолтный пароль
WORKER_PASS = 'nopass'

# Кол-во параллельных задач
WORKER_CONCURRENCY = 1

# Репозиторий с конфигурациями и инструментами для сборки ядра
CONFIG_REPO_KERNEL = 'git@bitbucket.org:alexsteam4000/crust-kernel.git'

# Репозиторий с конфигурациями и инструментами для сборки КФС
CONFIG_REPO_ROOTFS = 'git@bitbucket.org:alexsteam4000/crust-rootfs.git'

# Директория для сохранения собранных файлов
OUTPUT = '/output'

# Имя BB. Отобраджается через Web
BUILDBOT_TITLE = 'Crust Bot'

# Порт для подключения к Web-интерфейсу
BUILDBOT_PORT = 8010

# URL. Используется для отображения через Web и в рассылки писем,
# для формирования ссылок на билды
BUILDBOT_URL = 'http://195.161.41.167/buildbot/'


# ----------------------------------------------------------------------
# Настройка компонентов Buildbot
# ----------------------------------------------------------------------
c = BuildmasterConfig = {}

# Настройка воркера
# Для примера настроен 1 воркер

c['workers'] = []
c['workers'].append(worker.Worker(
    WORKER_NAME_LINUX_ARMHF, WORKER_PASS, max_builds=WORKER_CONCURRENCY))
c['workers'].append(worker.Worker(
    WORKER_NAME_ROOTFS_ARMHF, WORKER_PASS, max_builds=WORKER_CONCURRENCY))

c['protocols'] = {'pb': {'port': 9989}}


# Планировщики
c['schedulers'] = []

# ----------------------------------------------------------------------
# Linux ARMHF
# ----------------------------------------------------------------------
# Сборка ядра Linux по команде. Версия ядра указывается через Web-интерфейс
c['schedulers'].append(schedulers.ForceScheduler(
    name='linux-force',
    label='Linux iMX6ULL Nano',
    codebases=[util.CodebaseParameter(
        '',
        repository=None,
        revision=None,
        label="Parameters",
        branch=util.StringParameter(
            name='branch', label='Branch', default='linux-4.14.y'),
        project=util.FixedParameter(
            name='project', label='Project', default='Crust')
    )],
    username=util.StringParameter(name='User',
                                  default='User',
                                  required=True, size=80),
    reason=util.StringParameter(name='Reason',
                                default='Build on demand',
                                required=True, size=255),
    buttonName='Build',
    builderNames=['linux-imx6ull-nano']))

# ----------------------------------------------------------------------
# Debian 9
# ----------------------------------------------------------------------
# Сборка КФС Debian через debootstrap по команде
c['schedulers'].append(schedulers.ForceScheduler(
    name='debian9-system',
    label='Debian 9 (Stretch). System',
    codebases=[util.CodebaseParameter(
        '',
        name=None,
        label=None,
        repository=None,
        revision=None,
        branch=None,
        project=util.FixedParameter(name="project", default="Crust"),
    )],
    username=util.StringParameter(name="User",
                                  default="User",
                                  required=True, size=80),
    reason=util.StringParameter(name="Reason",
                                default="Build on demand",
                                required=True, size=255),
    buttonName='Build',
    builderNames=['debian9-system']))

# Сборка установочной КФС Debian по команде
c['schedulers'].append(schedulers.ForceScheduler(
    name='debian9-netinst',
    label='Debian 9 (Stretch). Netinstall',
    codebases=[util.CodebaseParameter(
        '',
        name=None,
        label=None,
        repository=None,
        revision=None,
        branch=None,
        project=util.FixedParameter(name="project", default="Crust"),
    )],
    username=util.StringParameter(name="User",
                                  default="User",
                                  required=True, size=80),
    reason=util.StringParameter(name="Reason",
                                default="Build on demand",
                                required=True, size=255),
    buttonName='Build',
    builderNames=['debian9-netinst']))


# ----------------------------------------------------------------------
# Сборка ядра Linux
# ----------------------------------------------------------------------
def build_kernel(repo, config, out):
    """
    repo - url репозитория ядра
    config - имя конфига buildroot'а, который должен быть собран
    out - выходная директория
    """
    name = 'buildroot-2018.02.6'
    url = 'https://buildroot.org/downloads/{}.tar.gz'.format(name)
    path = '{0}/armhf/kernel'.format(out)
    factory = util.BuildFactory()

    factory.addStep(steps.ShellCommand(
        name='Cleaning',
        haltOnFailure=True,
        command='rm -rf *'))

    factory.addStep(steps.ShellCommand(name='Getting configs',
                                       haltOnFailure=True,
                                       command=[
                                           'git', 'clone', '--single-branch', '-b',
                                                util.Interpolate('%(src::branch)s'), '--depth', '1', repo]
                                       ))

    factory.addStep(steps.ShellSequence(name='Preparing Buildroot',
                                        haltOnFailure=True,
                                        commands=[

                                            util.ShellArg(
                                                command=['wget', '-q', url],
                                                haltOnFailure=True,
                                                logfile='buildroot'),

                                            util.ShellArg(command=['tar', 'xf', '{0}.tar.gz'.format(
                                                name)],
                                                haltOnFailure=True,
                                                logfile='buildroot'),

                                            util.ShellArg(
                                                command=[
                                                    'mv', name, 'buildroot'],
                                                haltOnFailure=True,
                                                logfile='buildroot'),

                                            util.ShellArg(
                                                command='cp -rf crust-kernel/freescale/imx6ull_nano/* ./buildroot',
                                                haltOnFailure=True,
                                                logfile='buildroot')
                                        ]
                                        ))

    factory.addStep(steps.ShellSequence(name='Building components',
                                        workdir='build/buildroot',
                                        haltOnFailure=True,
                                        commands=[

                                            util.ShellArg(
                                                command=['make', config],
                                                haltOnFailure=True),

                                            util.ShellArg(
                                                command=['make', 'linux'],
                                                haltOnFailure=True,
                                                logfile='linux'),

                                            util.ShellArg(
                                                command=['make', 'busybox'],
                                                haltOnFailure=True,
                                                logfile='busybox'),

                                            # Упорная сборка у-бута. В версии загрузчика
                                            # от Freescale есть проблема в mkimage. В результате
                                            # она может давать ошибку при корректных входных данных
                                            # (и не давать при повторном запуске)
                                            # Просто несколько раз запустим сборку. Если вероятность
                                            # косяка = 50% или 0.5, то 3 повторных запуска дают вероятность
                                            # 0.5*0.5*0.5=0.125. 12% вместо 50
                                            # - уже хорошо.
                                            util.ShellArg(
                                                command='make uboot || make uboot || make uboot',
                                                haltOnFailure=True,
                                                logfile='uboot'),

                                            util.ShellArg(
                                                command=['make'],
                                                haltOnFailure=True,
                                                logfile='system'),
                                        ]
                                        ))

    factory.addStep(steps.ShellSequence(name='Building image',
                                        haltOnFailure=True,
                                        commands=[
                                            util.ShellArg(
                                                command=[
                                                    'tar', 'cvf', 'buildroot/output/images/configs.tar',
        'crust-kernel/freescale/imx6ull_nano/'],
                                                          haltOnFailure=True,
                                                          logfile='image'),

                                            util.ShellArg(
                                                command='ls buildroot/dl > buildroot/output/images/packages',
                                                haltOnFailure=True,
                                                logfile='image'),

                                            util.ShellArg(
                                                command='cd buildroot/output/images/ && md5sum * | tee checksums',
                                                haltOnFailure=True,
                                                logfile='image'),

                                            util.ShellArg(command=[
                                                          'bsdtar', 'jcvf', 'kernel.tar.bz2', '-C', 'buildroot/output/images', '.'],
                                                          haltOnFailure=True,
                                                          logfile='image'),

                                            util.ShellArg(
                                                command='md5sum kernel.tar.bz2 > checksums',
                                                haltOnFailure=True,
                                                logfile='image'),
                                        ]
    ))

    factory.addStep(steps.ShellSequence(name='Sharing image',
                                        haltOnFailure=True,
                                        commands=[

                                            util.ShellArg(command=['rm', '-rf', util.Interpolate(
                                                '{0}/%(src::branch)s/imx6ull-nano'.format(path))],
                                                haltOnFailure=True),

                                            util.ShellArg(command=['mkdir', '-p', util.Interpolate(
                                                '{0}/%(src::branch)s/imx6ull-nano'.format(path))],
                                                haltOnFailure=True),

                                            util.ShellArg(command=['mv', 'kernel.tar.bz2', util.Interpolate(
                                                '{0}/%(src::branch)s/imx6ull-nano'.format(path))],
                                                haltOnFailure=True),

                                            util.ShellArg(command=['mv', 'checksums', util.Interpolate(
                                                '{0}/%(src::branch)s/imx6ull-nano'.format(path))],
                                                haltOnFailure=True),

                                            util.ShellArg(
                                                command=[
                                                    'chmod', '-R', '755', out],
                                                haltOnFailure=True),
                                        ]
                                        ))

    return factory


# ----------------------------------------------------------------------
# Сборка Debian9 через debootstrap
# ----------------------------------------------------------------------
def build_debian9_system(repo, out):
    """
    repo - url репозитория со скриптами сборки
    out - директория для сохранения результатов
    """
    branch = 'debian9'
    packages = 'host-tools,base,network'
    distr = 'debian9-armhf'
    path = '{0}/armhf/rootfs/debian9-system'.format(out)
    factory = util.BuildFactory()
    factory.addStep(steps.ShellCommand(
        name='Cleaning',
        haltOnFailure=True,
        command='rm -rf *'))

    factory.addStep(steps.ShellCommand(name='Getting configs',
                                       haltOnFailure=True,
                                       command='git clone --single-branch -b {0} --depth 1 {1}'.format(branch, repo)))

    factory.addStep(steps.ShellCommand(name='Building rootfs',
                                       haltOnFailure=True,
                                       timeout=7200,
                                       workdir='build/crust-rootfs',
                                       command='TARGET_BUILD_DIR=./output TARGET_ARCH=armhf TARGET_PACKAGES={0} ./builder.sh'.format(packages)))

    factory.addStep(steps.ShellSequence(name='Building image',
                                        haltOnFailure=True,
                                        commands=[

                                        util.ShellArg(
                                        command='bsdtar jcvf  {0}.tar.bz2 -C crust-rootfs/output/{0} .'.format(
                                        distr),
                                        haltOnFailure=True, logfile='image'),

                                        util.ShellArg(
                                        command='md5sum {0}.tar.bz2 > checksums'.format(
                                        distr),
                                        haltOnFailure=True, logfile='image')]))

    factory.addStep(steps.ShellSequence(name='Sharing image',
                                        haltOnFailure=True,
                                        commands=[

                                            util.ShellArg(
                                                command=['rm', '-rf', path],
                                                haltOnFailure=True),

                                            util.ShellArg(
                                                command=['mkdir', '-p', path],
                                                haltOnFailure=True),

                                            util.ShellArg(
                                                command=[
                                                    'mv', '{0}.tar.bz2'.format(distr), path],
                                                haltOnFailure=True),

                                            util.ShellArg(
                                                command=[
                                                    'mv', 'checksums', path],
                                                haltOnFailure=True),

                                            util.ShellArg(
                                                command=[
                                                    'chmod', '-R', '755', out],
                                                haltOnFailure=True),
                                        ]
                                        ))

    return factory

# ----------------------------------------------------------------------
# Сборка Debian9 (установочный образ )
# ----------------------------------------------------------------------
def build_debian9_netinst(repo, out):
    """
    repo - url репозитория со скриптами сборки
    out - директория для сохранения результатов
    """
    branch = 'debian9-netinst'
    packages = 'netinst'
    distr = 'debian9-armhf'
    path = '{0}/armhf/rootfs/debian9-netinst'.format(out)
    factory = util.BuildFactory()
    factory.addStep(steps.ShellCommand(
        name='Cleaning',
        haltOnFailure=True,
        command='rm -rf *'))

    factory.addStep(steps.ShellCommand(name='Getting configs',
                                       haltOnFailure=True,
                                       command='git clone --single-branch -b {0} --depth 1 {1}'.format(branch, repo)))

    factory.addStep(steps.ShellSequence(name='Building rootfs',
                                        haltOnFailure=True,
                                        timeout=7200,
                                        workdir='build/crust-rootfs',
                                        commands=[

                                        util.ShellArg(
                                        command='TARGET_BUILD_DIR=./output TARGET_ARCH=armhf TARGET_PACKAGES={0} ./builder.sh'.format(
                                        packages),
                                        haltOnFailure=True,
                                        logfile='netinst'),

                                        util.ShellArg(
                                        command='cd output/{0} && md5sum * > checksums'.format(
                                            distr),
                                        haltOnFailure=True,
                                        logfile='netinst'),
                                        ]

                                        ))

    factory.addStep(steps.ShellSequence(name='Sharing image',
                                        haltOnFailure=True,
                                        workdir='build/crust-rootfs/output/{0}'.format(
                                            distr),
                                        commands=[

                                            util.ShellArg(
                                                command=['rm', '-rf', path],
                                                haltOnFailure=True),

                                            util.ShellArg(
                                                command=['mkdir', '-p', path],
                                                haltOnFailure=True),

                                            util.ShellArg(
                                                command='cp * {0}'.format(
                                                    path),
                                                haltOnFailure=True),

                                            util.ShellArg(
                                                command=[
                                                    'chmod', '-R', '755', out],
                                                haltOnFailure=True),
                                        ]
                                        ))

    return factory


# ----------------------------------------------------------------------
# Настройка билдеров
# ----------------------------------------------------------------------
c['builders'] = []

# Билдер для сборки ядер под imx6ull
IMX6ULL_CONFIG = 'imx6ull_nano_defconfig'
c['builders'].append(
    util.BuilderConfig(name='linux-imx6ull-nano',
                       workernames=[WORKER_NAME_LINUX_ARMHF],
                       factory=build_kernel(CONFIG_REPO_KERNEL, IMX6ULL_CONFIG, OUTPUT)))

c['builders'].append(
    util.BuilderConfig(name='debian9-system',
                       workernames=[WORKER_NAME_ROOTFS_ARMHF],
                       factory=build_debian9_system(CONFIG_REPO_ROOTFS, OUTPUT)))
c['builders'].append(
    util.BuilderConfig(name='debian9-netinst',
                       workernames=[WORKER_NAME_ROOTFS_ARMHF],
                       factory=build_debian9_netinst(CONFIG_REPO_ROOTFS, OUTPUT)))
# Оповещения
# Оставил для примера. Использование обычного почтового ящика для рассылки
# имеет несколько серьезных ограничений:
# ограничение по кол-ву писем в день
# ограничение по кол-ву адресатов
# быстрый бан из-за подозрений в рассылке спама. Эта проблема акутальна
# при работе с серверов Джино
# Хотя слать пиьсма самому себе можно. Этот вариант я и оставил
# Для работы рассылки через SSL/TLS необходимо доп. установить pyopenssl и service_identity.
# pip install pyopenssl
# pip install service_identity
MAILING_LIST = ["buildbotmailer@yandex.ru"]
c['services'] = []
mn = reporters.MailNotifier(fromaddr="buildbotmailer@yandex.ru",
                            sendToInterestedUsers=False,
                            extraRecipients=MAILING_LIST,
                            useTls=True,
                            relayhost="smtp.yandex.com",
                            smtpPort=587,
                            smtpUser="buildbotmailer@yandex.ru", smtpPassword="bbmailer#")
c['services'].append(mn)

# Настройка Web-интерфейса
c['title'] = BUILDBOT_TITLE
c['buildbotURL'] = BUILDBOT_URL
c['www'] = dict(port=BUILDBOT_PORT,
                plugins=dict(waterfall_view={}, console_view={}))

# Настройка БД для хранения результатов
c['db'] = {
    'db_url': "sqlite:///state.sqlite",
}
