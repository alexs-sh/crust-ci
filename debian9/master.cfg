# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *

####### Описание
# Для примера настроен 1 мастер -> 1 воркер ->1 билдер без параллельного выполнения задач.
# Эта комбинация весьма проста и не тербовательна к ресурсам, что делает
# ее идеальной для примера
# Мастер - отслеживает изменения репозитория или команды от пользователя.
# Воркер - получает команды от мастера и передает билдерам. Он связан с конкретной версией ядра
# Билдер - непосредственно выполняет задачу. Он связан с конкертной версией девайса
# Т.о.
# 1 Master -> N Worker, где каждый воркер отвечает за свою ветку ядра
# 1 Worker -> N Builder, где каждый билдер отвечает за свое устройство
# Для запуска сборки используются два триггера:
#    - изменение в репозитории
#    - команда от пользователя
# За обработку каждго из этих событий отвечют планировщищки

WORKER_NAME='rworker'
WORKER_PASS='nopass'
WORKER_CONCURRENCY=1

BUILDER_NAME='debian9-system-image'

CRUST_REPO='git@bitbucket.org:alexsteam4000/crust-rootfs.git'
CRUST_BRANCH='debian9'

OUTPUT_DIR='/tmp/crust-ci/debian9/'

BUILDBOT_HOST='127.0.0.1'
BUILDBOT_PORT=8010

c = BuildmasterConfig = {}

####### Настройка воркера
# Для примера настроен 1 воркер

c['workers']=[]
c['workers'].append(worker.Worker(WORKER_NAME, WORKER_PASS, max_builds=WORKER_CONCURRENCY))
c['protocols'] = {'pb': {'port': 9989}}


####### Планировщики
c['schedulers'] = []
c['schedulers'].append(schedulers.ForceScheduler(
                            name='Force',
                            builderNames=[BUILDER_NAME]))

#######  Самое интересное - шаги в сборке
def build_rootfs(repo,branch,out):
    """
    repo - url репозитория ядра
    branch - имя ветки ядра
    config - имя конфига buildroot'а, который должен быть собран
    """
    buildroot_ver = 'buildroot-2018.02.6'
    factory = util.BuildFactory()
    factory.addStep(steps.ShellCommand(name='Cleanup', command='rm -rf * && rm -rf /chroot/debian9-armhf && rm -rf {0}'.format(out)))
    factory.addStep(steps.ShellCommand(name='Download Crust-Rootfs', command='git clone --single-branch -b {0} --depth 1 {1}'.format(branch, repo)))
    factory.addStep(steps.ShellCommand(name='Build', command='cd crust-rootfs && TARGET_OS=debian9 TARGET_ARCH=armhf TARGET_PACKAGES=host-tools,base,network ./builder.sh'))
    factory.addStep(steps.ShellCommand(name='Create archive', command='bsdtar -cvf  debian-armhf.tar -C /chroot/debian9-armhf .'))
    factory.addStep(steps.ShellCommand(name='Output', command='mkdir -p {0} && cp debian-armhf.tar {0}'.format(out)))
    return factory

c['builders'] = []
c['builders'].append(
    util.BuilderConfig(name=BUILDER_NAME,
      workernames=[WORKER_NAME],
      factory=build_rootfs(CRUST_REPO, CRUST_BRANCH,OUTPUT_DIR)))

c['services'] = []

####### Названия / имена / красивости
c['title'] = 'Debian Bot'
c['buildbotURL'] = 'http://{0}:{1}/'.format(BUILDBOT_HOST, BUILDBOT_PORT)

# Настройка WEB-морды
c['www'] = dict(port=BUILDBOT_PORT,
                plugins=dict(waterfall_view={}, console_view={}, grid_view={}))

####### Настройка БД для хранения результатов

c['db'] = {
    'db_url' : "sqlite:///state.sqlite",
}
